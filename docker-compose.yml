version: "3.8"

networks:
  ai-finance-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-finance-postgres
    restart: unless-stopped
    networks:
      - ai-finance-network
    environment:
      POSTGRES_DB: ai_finance
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d ai_finance"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache & Message Queue
  redis:
    image: redis:7-alpine
    container_name: ai-finance-redis
    restart: unless-stopped
    networks:
      - ai-finance-network
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-finance-gateway
    restart: unless-stopped
    networks:
      - ai-finance-network
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://admin:password@postgres:5432/ai_finance
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Auth Microservice (Future implementation)
  # auth-service:
  #   build:
  #     context: ./services/auth
  #     dockerfile: Dockerfile
  #   container_name: ai-finance-auth
  #   restart: unless-stopped
  #   networks:
  #     - ai-finance-network
  #   ports:
  #     - "3001:3001"
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=postgresql://admin:password@postgres:5432/ai_finance
  #     - REDIS_URL=redis://redis:6379
  #     - JWT_SECRET=your-super-secret-jwt-key
  #   depends_on:
  #     - postgres
  #     - redis

  # AI/Chat Microservice (Future implementation)
  # ai-service:
  #   build:
  #     context: ./services/ai
  #     dockerfile: Dockerfile
  #   container_name: ai-finance-ai
  #   restart: unless-stopped
  #   networks:
  #     - ai-finance-network
  #   ports:
  #     - "3002:3002"
  #   environment:
  #     - NODE_ENV=production
  #     - REDIS_URL=redis://redis:6379
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - GROQ_API_KEY=${GROQ_API_KEY}
  #   depends_on:
  #     - redis

  # Finance Microservice (Future implementation)
  # finance-service:
  #   build:
  #     context: ./services/finance
  #     dockerfile: Dockerfile
  #   container_name: ai-finance-finance
  #   restart: unless-stopped
  #   networks:
  #     - ai-finance-network
  #   ports:
  #     - "3003:3003"
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=postgresql://admin:password@postgres:5432/ai_finance
  #     - REDIS_URL=redis://redis:6379
  #   depends_on:
  #     - postgres
  #     - redis

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-finance-prometheus
    restart: unless-stopped
    networks:
      - ai-finance-network
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"

  grafana:
    image: grafana/grafana:latest
    container_name: ai-finance-grafana
    restart: unless-stopped
    networks:
      - ai-finance-network
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana:/var/lib/grafana

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-finance-redis-gui
    restart: unless-stopped
    networks:
      - ai-finance-network
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
